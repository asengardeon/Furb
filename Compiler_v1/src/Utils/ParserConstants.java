package Utils;

public interface ParserConstants {

	public int START_SYMBOL = 48;
	public int FIRST_NON_TERMINAL = 48;
	public int FIRST_SEMANTIC_ACTION = 82;

	int[][] PARSER_TABLE = { { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1 },
			{ -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, 1, -1, 1, -1, -1, 2, -1, -1, 2 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, -1, -1, -1, -1, -1, -1 },
			{ -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 5, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, 4, 5, -1, 5, -1, -1, 4, -1, -1, 4 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 6, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, -1, 13, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16 },
			{ -1, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, -1, -1, -1, -1, -1, 17, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, 28, -1, -1, 28 },
			{ -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, 30, -1, 29, 29, 29, -1, -1, 30, -1, -1, -1, -1, -1, 30, -1, -1, 30 },
			{ -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, 32, -1, -1, 33 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, 36, 37, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, 38, 38, 38, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, 38, -1, -1, -1, -1, -1, 38, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 39, -1, -1, -1, 39, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1 },
			{ -1, 42, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, 45, -1, -1, -1, -1, -1, 43, -1 },
			{ -1, 46, 46, 46, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 47, 47, 47, 47, -1, 48, -1, 48, -1, -1, -1, 48, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1 },
			{ -1, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, 60, 60, 61, 62, 60, 60, 60, 60, 60, 60, -1, 60, -1, 60, -1, -1, -1, 60, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1 },
			{ -1, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, 57, 58, -1, -1, 56, 56, 56, 56, 56, 56, -1, 56, -1, 56, -1, -1, -1, 56, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1 },
			{ -1, 63, 64, 65, 67, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, 49, 50, 52, 54, 51, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, -1, 69, -1, 69, -1, -1, -1, 69, -1, 69, -1, -1, -1, -1, 70, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, -1, 71, -1, -1 } };

	int[][] PRODUCTIONS = { { 83, 43, 49, 66, 34, 84 }, { 50 }, { 0 }, { 52, 19, 55, 85, 18, 51 }, { 0 }, { 50 }, { 53, 86 }, { 54 }, { 41 }, { 27 }, { 25 }, { 39, 20, 53, 113, 22, 3, 114, 21 }, { 2, 87, 56 }, { 0 }, { 22, 55 }, { 44, 17, 55, 16, 89, 18 }, { 47, 17, 59, 16, 18 }, { 70, 90, 60 },
			{ 0 }, { 22, 59 }, { 94, 31, 66, 26, 17, 70, 16, 62, 18 }, { 95, 28 }, { 96, 36 }, { 38, 17, 70, 16, 91, 66, 64, 35, 18, 92 }, { 0 }, { 93, 33, 66 }, { 23, 17, 70, 115, 22, 70, 116, 16 }, { 30, 17, 70, 117, 16 }, { 68, 67 }, { 0 }, { 66 }, { 2, 69 }, { 57 }, { 58 }, { 61 }, { 63 },
			{ 56, 15, 70, 88, 18 }, { 65, 18 }, { 72, 71 }, { 0 }, { 24, 72, 97, 71 }, { 42, 72, 98, 71 }, { 73 }, { 46, 99 }, { 37, 100 }, { 40, 72, 101 }, { 77, 74 }, { 80, 102, 77, 103 }, { 0 }, { 9 }, { 10 }, { 13 }, { 11 }, { 14 }, { 12 }, { 75, 78 }, { 0 }, { 5, 75, 104, 78 },
			{ 6, 75, 105, 78 }, { 79, 76 }, { 0 }, { 7, 79, 106, 76 }, { 8, 79, 107, 76 }, { 2, 87, 81 }, { 3, 109 }, { 4, 110 }, { 17, 70, 16 }, { 5, 79, 111 }, { 6, 79, 112 }, { 108 }, { 29, 118 }, { 45, 119 }, { 32, 17, 70, 120, 16 } };

	String[] PARSER_ERROR = {
			" ", //
			"era esperado fim de programa",//
			"era esperado comando", //
			"era esperado real", //
			"era esperado literal", //
			"era esperado \"+\"", //
			"era esperado \"-\"", //
			"era esperado \"*\"", //
			"era esperado \"/\"", //
			"era esperado \"==\"",//
			"era esperado \"~=\"",//
			"era esperado \"<=\"",//
			"era esperado \">=\"", //
			"era esperado \"<\"", //
			"era esperado \">\"", //
			"era esperado \"=\"",//
			"era esperado \")\"", //
			"era esperado \"(\"", //
			"era esperado \";\"", //
			"era esperado \":\"",//
			"era esperado \"[\"", //
			"era esperado \"]\"", //
			"era esperado \",\"", //
			"era esperado ADD", //
			"era esperado AND", //
			"era esperado BOOLEAN", //
			"era esperado CASE", //
			"era esperado CHARACTER",//
			"era esperado CONTINUE", "era esperado COUNT", "era esperado DELETE", "era esperado DO", "era esperado ELEMENTOF", "era esperado ELSE", "era esperado END", "era esperado ENDIF", "era esperado EXIT", "era esperado FALSE", "era esperado IF", "era esperado LIST", "era esperado NOT",
			"era esperado NUMBER", "era esperado OR", "era esperado PROGRAM", "era esperado READ", "era esperado SIZE", "era esperado TRUE", "era esperado WRITE", "era esperado program",// "<program> inválido",
			"era esperado comando ou tipo",// "<decvars> inválido",
			"era esperado boolean, character, list ou number", // <decvar>
																// inválido",
			"era esperado tipo", // "<decvar1> inválido",
			"era esperado boolean, character, list ou number", // "<tipos> inválido",
			"era esperado boolean, character ou number", // "<tiposimples> inválido",
			"era esperado list", // "<tipolista> inválido",
			"era esperado comando", // "<listaid> inválido",
			"era esperado '=' , ')', ';' ou ','", // "<listaid1> inválido",
			"era esperado read", // "<entrada> inválido",
			"era esperado write", // "<saida> inválido",
			"era esperada expressão", // "<listaexp> inválido",
			"era esperado ')' ou ','", // "<listaexp1> inválido",
			"era esperado do", // "<loop> inválido",
			"era esperado continue ou exit", // "<final> inválido",
			"era esperado if", // "<selecao> inválido",
			"era esperado else ou endif", // "<else> inválido",
			"era esperado add ou delete", // "<listaaux> inválido",
			"era esperado tipo ou comando", // "<listacmd> inválido",
			"era esperado comando", // "<listacmd1> inválido",
			"era esperado comando", // "<comando> inválido",
			"era esperado '=', ',', add ou delete", // "<comando1> inválido",
			"era esperada expressao", // "<expressao> inválido",
			"era esperada expressão", // "<expressao1> inválido",
			"era esperada expressão", // "<valor> inválido",
			"era esperada expressão", // "<relacional> inválido",
			"era esperada expressão", // "<relacional1> inválido",
			"era esperada expressão", // "<termo> inválido",
			"era esperado simbolo ou palavra reservada", // "<termo1> inválido",
			"era esperada expressão", // "<aritmetica> inválido",
			"era esperada expressão", // "<aritmetica1> inválido",
			"era esperada expressão", // "<elemento_expressao> inválido",
			"era esperada expressão", // "<operador_relacional> inválido",
			"era esperado simbolo ou palavra reservada", // "<identificadores> inválido"
	};
}
