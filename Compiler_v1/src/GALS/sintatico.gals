#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
min: [a-z]
mai: [A-Z]
def: {mai}{min}+
dig: [0-9]

int: [1-9]
frac: (, ( {int} | 0)+ )

letra1: [^ ' \n \\]
letra2: [^ \" \\]
literal1:  '( {letra1} | \\\\ | \\' )*'
literal2: \"( {letra2} | \\\\ | \\\" )*\" 

allLinha: [^\n]
allBloco: [^ \] ]

//quetão e)
bloco: \-\- \[ {allBloco}* \]

//questão d)
linha: \-\- {allLinha}*

#Tokens
//questão a)
identificador: {min} ( {min} | {def} )* ( _{dig}+ )?

//questão b)
real: (0 | {int} ( {int} | 0 )* )+ {frac}?

//quaestão c)
literal: {literal1} | {literal2}

//ignorando
:[\s\t\n]* | ({bloco} | {linha})*

"+"
"-"
"*"
"/"
"=="
"~="
"<="
">="
"<"
">"
"="
")"
"("
";"
":"
"["
"]"
","


ADD = identificador : "add"
AND = identificador : "and"
BOOLEAN = identificador : "boolean"
CASE = identificador : "case"
CHARACTER = identificador : "character"
CONTINUE = identificador : "continue"
COUNT = identificador : "count"
DELETE = identificador : "delete"
DO = identificador : "do"
ELEMENTOF = identificador : "elementOf"
ELSE = identificador : "else"
END = identificador : "end"
ENDIF = identificador : "endif"
EXIT = identificador : "exit"
FALSE = identificador : "false"
IF = identificador : "if"
LIST = identificador : "list"
NOT = identificador : "not"
NUMBER = identificador : "number"
OR = identificador : "or"
PROGRAM = identificador : "program"
READ = identificador : "read"
SIZE = identificador : "size"
TRUE = identificador : "true"
WRITE = identificador : "write"
#NonTerminals
<program>
<decvars>
<decvar>
<decvar1>
<tipos>
<tiposimples>
<tipolista>
<listaid>
<listaid1>
<entrada>
<saida>
<listaexp>
<listaexp1>
<loop>
<final>
<selecao>
<else>
<listaaux>
<listacmd>
<listacmd1>
<comando>
<comando1> 
<expressao>
<expressao1>
<valor>
<relacional>
<relacional1>
<termo>
<termo1>
<aritmetica>
<aritmetica1>
<elemento_expressao>
<operador_relacional>
<identificadores>

#Grammar
<program> 		::= #1 PROGRAM <decvars><listacmd>END #2;
<decvars> 		::= <decvar> |î;
<decvar>  		::= <tipos>":"<listaid> #3 ";"<decvar1>;
<decvar1>		::= î | <decvar>;
<tipos>   		::= <tiposimples> #4 | <tipolista>;
<tiposimples>		::= NUMBER | CHARACTER | BOOLEAN;
<tipolista>		::= LIST"["<tiposimples> #31 "," real #32 "]";
<listaid>		::= identificador #5 <listaid1>;
<listaid1>		::= î | "," <listaid>;
<entrada>		::= READ"("<listaid>")" #7 ";";
<saida>			::= WRITE"("<listaexp>")" ";";
<listaexp>		::= <expressao> #8 <listaexp1>;
<listaexp1>		::= î | ","<listaexp>;
<loop>			::= #12 DO<listacmd>CASE"("<expressao>")"<final>";";
<final>			::= #13 CONTINUE | #14 EXIT;
<selecao>		::= IF"("<expressao>")" #9 <listacmd><else>ENDIF";" #10 ;
<else>			::= î | #11 ELSE<listacmd>;
<listaaux>		::= ADD"("<expressao>","<expressao>")" | DELETE"("<expressao>")";
<listacmd>		::= <comando><listacmd1>;
<listacmd1>		::= î | <listacmd>;
<comando>		::= identificador<comando1> | <entrada> | <saida> | <loop> | <selecao>;
<comando1> 		::= <listaid1> "=" <expressao> #6 ";" |<listaaux>";";
<expressao>		::= <valor> <expressao1>;
<expressao1>		::= î |  AND <valor> #15 <expressao1> | OR <valor> #16 <expressao1>; 
<valor>			::= <relacional> | TRUE #17 | FALSE #18 | NOT <valor> #19;
<relacional>		::= <aritmetica> <relacional1>;
<relacional1>		::= <operador_relacional> #20 <aritmetica> #21 | î;
<operador_relacional> 	::= "==" | "~=" | "<" | "<=" | ">" | ">=" ;
<aritmetica>		::= <termo><aritmetica1>;
<aritmetica1>		::= î| "+" <termo> #22 <aritmetica1>| "-" <termo> #23 <aritmetica1>;
<termo>			::= <elemento_expressao><termo1>;
<termo1>		::= î | "*"<elemento_expressao> #24 <termo1> | "/" <elemento_expressao> #25 <termo1>; 
<elemento_expressao>	::= identificador #5 <identificadores> | real #27 | literal #28 | "("<expressao>")" | "+"<elemento_expressao> #29 | "-"<elemento_expressao> #30;
<identificadores>	::= î #26 | COUNT #36 | SIZE #37 | ELEMENTOF "("<expressao> #38 ")" ;

